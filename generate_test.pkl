amends "pkl:test"

import "./generate.pkl" as generate
import "package://pkl.declix.org/pkl-declix@0.6.0#/apt/apt.pkl"
import "package://pkl.declix.org/pkl-declix@0.6.0#/fs/fs.pkl"
import "package://pkl.declix.org/pkl-declix@0.6.0#/systemd/systemd.pkl"
import "package://pkl.declix.org/pkl-declix@0.6.0#/user/user.pkl"

// Helper function to generate from any resource
local function genDynamic(resource: Any) = generate.gen(resource.toDynamic())

examples {
  // APT Package examples
  ["APT package installed"] {
    genDynamic(new apt.Package {
      name = "vim"
      state = "installed"
    })
  }
  
  ["APT package missing"] {
    genDynamic(new apt.Package {
      name = "unwanted-package"
      state = "missing"
    })
  }
  
  // File system examples
  ["File present with content"] {
    genDynamic(new fs.File {
      path = "/tmp/test.txt"
      state = new fs.FilePresent {
        content = "Hello World"
        owner = "root"
        group = "root"
        permissions = "644"
      }
    })
  }
  
  ["File absent"] {
    genDynamic(new fs.File {
      path = "/tmp/old-file.txt"
      state = new fs.Missing {}
    })
  }
  
  ["File with multiline content"] {
    genDynamic(new fs.File {
      path = "/etc/nginx/nginx.conf"
      state = new fs.FilePresent {
        content = """
          server {
              listen 80;
              root /var/www/html;
          }
          """
        owner = "root"
        group = "root"
        permissions = "644"
      }
    })
  }
  
  ["File with special characters in path"] {
    genDynamic(new fs.File {
      path = "/tmp/file-with-dashes_and_underscores.test.txt"
      state = new fs.FilePresent {
        content = "test content"
        owner = "root"
        group = "root"
        permissions = "644"
      }
    })
  }
  
  // Directory examples
  ["Directory present"] {
    genDynamic(new fs.Dir {
      path = "/opt/myapp"
      state = new fs.DirPresent {
        owner = "app"
        group = "app"
        permissions = "755"
      }
    })
  }
  
  ["Directory absent"] {
    genDynamic(new fs.Dir {
      path = "/tmp/old-dir"
      state = new fs.Missing {}
    })
  }
  
  // Systemd examples
  ["Systemd service enabled"] {
    genDynamic(new systemd.Unit {
      name = "nginx.service"
      state = new systemd.Enabled {
        active = true
        autoStart = true
        daemonReload = true
      }
    })
  }
  
  ["Systemd service disabled"] {
    genDynamic(new systemd.Unit {
      name = "bluetooth.service"
      state = new systemd.Disabled {
        stopIfRunning = true
        daemonReload = true
      }
    })
  }
  
  ["Systemd service masked"] {
    genDynamic(new systemd.Unit {
      name = "cups.service"
      state = new systemd.Masked {
        daemonReload = true
      }
    })
  }
  
  ["Systemd service missing"] {
    genDynamic(new systemd.Unit {
      name = "old.service"
      state = new systemd.Missing {
        daemonReload = true
      }
    })
  }
  
  ["Systemd service with dots in name"] {
    genDynamic(new systemd.Unit {
      name = "my-app.service"
      state = new systemd.Enabled {
        active = true
        autoStart = true
        daemonReload = true
      }
    })
  }
  
  // User examples
  ["User present"] {
    genDynamic(new user.User {
      name = "webuser"
      state = new user.UserPresent {
        home = "/home/webuser"
        shell = "/bin/bash"
      }
    })
  }
  
  ["User absent"] {
    genDynamic(new user.User {
      name = "olduser"
      state = new user.Missing {}
    })
  }
}

facts {
  // Test Gen object types
  ["All resource types return proper Gen objects"] {
    local aptGen = genDynamic(new apt.Package { name = "test"; state = "installed" })
    local fileGen = genDynamic(new fs.File { path = "/test"; state = new fs.FilePresent { content = "test"; owner = "root"; group = "root"; permissions = "644" } })
    local dirGen = genDynamic(new fs.Dir { path = "/test"; state = new fs.DirPresent { owner = "root"; group = "root"; permissions = "755" } })
    local systemdGen = genDynamic(new systemd.Unit { name = "test.service"; state = new systemd.Enabled {} })
    local userGen = genDynamic(new user.User { name = "test"; state = new user.UserPresent {} })
    
    aptGen is generate.AptPackageGen
    fileGen is generate.FsFileGen
    dirGen is generate.FsDirGen
    systemdGen is generate.SystemdUnitGen
    userGen is generate.UserGen
  }
  
  // Test Gen object properties
  ["APT package generates correct Gen object"] {
    local aptGen = genDynamic(new apt.Package { name = "htop"; state = "installed" })
    aptGen.id == "apt:htop"
    aptGen.functionName == "_apt__htop"
    aptGen.result.join("\n").contains("__apt_installed")
    aptGen.result.join("\n").contains("htop")
    aptGen.result.join("\n").contains("installed")
  }
  
  ["File resource generates correct Gen object"] {
    local fileGen = genDynamic(new fs.File {
      path = "/etc/config.yml"
      state = new fs.FilePresent {
        content = "version: 1"
        owner = "app"
        group = "app"
        permissions = "600"
      }
    })
    fileGen.id == "file:/etc/config.yml"
    fileGen.functionName == "_file____etc__config__yml"
    fileGen.result.join("\n").contains("__file_present")
    fileGen.result.join("\n").contains("/etc/config.yml")
    fileGen.result.join("\n").contains("600")
  }
  
  ["Directory resource generates correct Gen object"] {
    local dirGen = genDynamic(new fs.Dir {
      path = "/opt/app"
      state = new fs.DirPresent {
        owner = "app"
        group = "app"
        permissions = "755"
      }
    })
    dirGen.id == "dir:/opt/app"
    dirGen.functionName == "_dir____opt__app"
    dirGen.result.join("\n").contains("__dir_present")
    dirGen.result.join("\n").contains("/opt/app")
    dirGen.result.join("\n").contains("755")
  }
  
  ["Systemd service generates correct Gen object"] {
    local systemdGen = genDynamic(new systemd.Unit {
      name = "nginx.service"
      state = new systemd.Enabled {
        active = true
        autoStart = true
        daemonReload = true
      }
    })
    systemdGen.id == "systemd:nginx.service"
    systemdGen.functionName == "_systemd__nginx__service"
    systemdGen.result.join("\n").contains("__systemd_unit_present")
    systemdGen.result.join("\n").contains("nginx.service")
    systemdGen.result.join("\n").contains("enabled")
  }
  
  ["User resource generates correct Gen object"] {
    local userGen = genDynamic(new user.User {
      name = "webuser"
      state = new user.UserPresent {
        home = "/home/webuser"
        shell = "/bin/bash"
      }
    })
    userGen.id == "user:webuser"
    userGen.functionName == "_user__webuser"
    userGen.result.join("\n").contains("__user_present")
    userGen.result.join("\n").contains("webuser")
    userGen.result.join("\n").contains("/home/webuser")
  }
  
  // Test ID generation
  ["Resource IDs are correctly generated"] {
    local apt = genDynamic(new apt.Package { name = "vim"; state = "installed" })
    local file = genDynamic(new fs.File { path = "/tmp/test"; state = new fs.Missing {} })
    local dir = genDynamic(new fs.Dir { path = "/opt/app"; state = new fs.Missing {} })
    local systemd = genDynamic(new systemd.Unit { name = "nginx.service"; state = new systemd.Missing {} })
    local user = genDynamic(new user.User { name = "appuser"; state = new user.Missing {} })
    
    apt.id == "apt:vim"
    file.id == "file:/tmp/test"
    dir.id == "dir:/opt/app"
    systemd.id == "systemd:nginx.service"
    user.id == "user:appuser"
  }
  
  // Test function name sanitization
  ["Function names are properly sanitized"] {
    local normalFile = genDynamic(new fs.File { path = "/etc/config"; state = new fs.Missing {} })
    local specialFile = genDynamic(new fs.File { path = "/etc/app-config.d/settings.conf"; state = new fs.Missing {} })
    local serviceWithDots = genDynamic(new systemd.Unit { name = "my-app.service"; state = new systemd.Missing {} })
    
    normalFile.functionName == "_file____etc__config"
    specialFile.functionName == "_file____etc__app__config__d__settings__conf"
    serviceWithDots.functionName == "_systemd__my__app__service"
  }
  
  // Test aux functions
  ["File with content has aux function"] {
    local fileGen = genDynamic(new fs.File {
      path = "/tmp/test.txt"
      state = new fs.FilePresent {
        content = "Hello World"
        owner = "root"
        group = "root"
        permissions = "644"
      }
    })
    
    fileGen.aux.length > 0
    fileGen.aux.join("\n").contains("function __content__")
    fileGen.aux.join("\n").contains("base64 --decode")
  }
  
  ["File absent has no aux function"] {
    local absentFileGen = genDynamic(new fs.File {
      path = "/tmp/absent.txt"
      state = new fs.Missing {}
    })
    
    absentFileGen.aux.length == 0
  }
  
  // Test state handling
  ["Different systemd states generate correct parameters"] {
    local enabled = genDynamic(new systemd.Unit { name = "test.service"; state = new systemd.Enabled { active = true; autoStart = true; daemonReload = true } })
    local disabled = genDynamic(new systemd.Unit { name = "test.service"; state = new systemd.Disabled { stopIfRunning = true; daemonReload = true } })
    local masked = genDynamic(new systemd.Unit { name = "test.service"; state = new systemd.Masked { daemonReload = true } })
    local missing = genDynamic(new systemd.Unit { name = "test.service"; state = new systemd.Missing { daemonReload = true } })
    
    enabled.result.join("\n").contains("enabled")
    disabled.result.join("\n").contains("disabled")
    masked.result.join("\n").contains("masked")
    missing.result.join("\n").contains("missing")
  }
  
  ["User states generate correct function calls"] {
    local userPresent = genDynamic(new user.User { name = "test"; state = new user.UserPresent { home = "/home/test"; shell = "/bin/bash" } })
    local userAbsent = genDynamic(new user.User { name = "test"; state = new user.Missing {} })
    
    userPresent.result.join("\n").contains("__user_present")
    userAbsent.result.join("\n").contains("__user_absent")
  }
  
  ["File and directory states generate correct function calls"] {
    local filePresent = genDynamic(new fs.File { path = "/test"; state = new fs.FilePresent { content = "test"; owner = "root"; group = "root"; permissions = "644" } })
    local fileAbsent = genDynamic(new fs.File { path = "/test"; state = new fs.Missing {} })
    local dirPresent = genDynamic(new fs.Dir { path = "/test"; state = new fs.DirPresent { owner = "root"; group = "root"; permissions = "755" } })
    local dirAbsent = genDynamic(new fs.Dir { path = "/test"; state = new fs.Missing {} })
    
    filePresent.result.join("\n").contains("__file_present")
    fileAbsent.result.join("\n").contains("__file_missing")
    dirPresent.result.join("\n").contains("__dir_present")
    dirAbsent.result.join("\n").contains("__dir_missing")
  }
  
  ["APT package states generate correct function calls"] {
    local aptInstalled = genDynamic(new apt.Package { name = "vim"; state = "installed" })
    local aptMissing = genDynamic(new apt.Package { name = "vim"; state = "missing" })
    
    aptInstalled.result.join("\n").contains("__apt_installed")
    aptMissing.result.join("\n").contains("__apt_missing")
  }
}