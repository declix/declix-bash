amends "pkl:test"

import "./generate.pkl" as generate
import "package://pkl.declix.org/pkl-declix@0.6.0#/apt/apt.pkl"
import "package://pkl.declix.org/pkl-declix@0.6.0#/fs/fs.pkl"
import "package://pkl.declix.org/pkl-declix@0.6.0#/systemd/systemd.pkl"
import "package://pkl.declix.org/pkl-declix@0.6.0#/user/user.pkl"

// Helper function to generate from any resource
local function genDynamic(resource: Any) = generate.gen(resource.toDynamic())

examples {
  // APT Package examples
  ["APT package installed"] {
    genDynamic(new apt.Package {
      name = "vim"
      state = "installed"
    })
  }
  
  ["APT package missing"] {
    genDynamic(new apt.Package {
      name = "unwanted-package"
      state = "missing"
    })
  }
  
  // File system examples
  ["File present with content"] {
    genDynamic(new fs.File {
      path = "/tmp/test.txt"
      state = new fs.FilePresent {
        content = "Hello World"
        owner = "root"
        group = "root"
        permissions = "644"
      }
    })
  }
  
  ["File absent"] {
    genDynamic(new fs.File {
      path = "/tmp/old-file.txt"
      state = new fs.Missing {}
    })
  }
  
  ["File with multiline content"] {
    genDynamic(new fs.File {
      path = "/etc/nginx/nginx.conf"
      state = new fs.FilePresent {
        content = """
          server {
              listen 80;
              root /var/www/html;
          }
          """
        owner = "root"
        group = "root"
        permissions = "644"
      }
    })
  }
  
  ["File with special characters in path"] {
    genDynamic(new fs.File {
      path = "/tmp/file-with-dashes_and_underscores.test.txt"
      state = new fs.FilePresent {
        content = "test content"
        owner = "root"
        group = "root"
        permissions = "644"
      }
    })
  }
  
  // Directory examples
  ["Directory present"] {
    genDynamic(new fs.Dir {
      path = "/opt/myapp"
      state = new fs.DirPresent {
        owner = "app"
        group = "app"
        permissions = "755"
      }
    })
  }
  
  ["Directory absent"] {
    genDynamic(new fs.Dir {
      path = "/tmp/old-dir"
      state = new fs.Missing {}
    })
  }
  
  // Systemd examples
  ["Systemd service enabled"] {
    genDynamic(new systemd.Unit {
      name = "nginx.service"
      state = new systemd.Enabled {
        active = true
        autoStart = true
        daemonReload = true
      }
    })
  }
  
  ["Systemd service disabled"] {
    genDynamic(new systemd.Unit {
      name = "bluetooth.service"
      state = new systemd.Disabled {
        stopIfRunning = true
        daemonReload = true
      }
    })
  }
  
  ["Systemd service masked"] {
    genDynamic(new systemd.Unit {
      name = "cups.service"
      state = new systemd.Masked {
        daemonReload = true
      }
    })
  }
  
  ["Systemd service missing"] {
    genDynamic(new systemd.Unit {
      name = "old.service"
      state = new systemd.Missing {
        daemonReload = true
      }
    })
  }
  
  ["Systemd service with dots in name"] {
    genDynamic(new systemd.Unit {
      name = "my-app.service"
      state = new systemd.Enabled {
        active = true
        autoStart = true
        daemonReload = true
      }
    })
  }
  
  // User examples
  ["User present"] {
    genDynamic(new user.User {
      name = "webuser"
      state = new user.UserPresent {
        home = "/home/webuser"
        shell = "/bin/bash"
      }
    })
  }
  
  ["User absent"] {
    genDynamic(new user.User {
      name = "olduser"
      state = new user.Missing {}
    })
  }
  
  // Test Gen object types
  ["APT package Gen object"] {
    genDynamic(new apt.Package { name = "test"; state = "installed" })
  }
  
  ["File Gen object"] {
    genDynamic(new fs.File { path = "/test"; state = new fs.FilePresent { content = "test"; owner = "root"; group = "root"; permissions = "644" } })
  }
  
  ["Directory Gen object"] {
    genDynamic(new fs.Dir { path = "/test"; state = new fs.DirPresent { owner = "root"; group = "root"; permissions = "755" } })
  }
  
  ["Systemd Gen object"] {
    genDynamic(new systemd.Unit { name = "test.service"; state = new systemd.Enabled {} })
  }
  
  ["User Gen object"] {
    genDynamic(new user.User { name = "test"; state = new user.UserPresent {} })
  }
  
  ["APT package htop"] {
    genDynamic(new apt.Package { name = "htop"; state = "installed" })
  }
  
  ["Config file"] {
    genDynamic(new fs.File {
      path = "/etc/config.yml"
      state = new fs.FilePresent {
        content = "version: 1"
        owner = "app"
        group = "app"
        permissions = "600"
      }
    })
  }
  
  ["App directory"] {
    genDynamic(new fs.Dir {
      path = "/opt/app"
      state = new fs.DirPresent {
        owner = "app"
        group = "app"
        permissions = "755"
      }
    })
  }
  
  ["Nginx service"] {
    genDynamic(new systemd.Unit {
      name = "nginx.service"
      state = new systemd.Enabled {
        active = true
        autoStart = true
        daemonReload = true
      }
    })
  }
  
  ["Web user"] {
    genDynamic(new user.User {
      name = "webuser"
      state = new user.UserPresent {
        home = "/home/webuser"
        shell = "/bin/bash"
      }
    })
  }
  
  ["Complex file path"] {
    genDynamic(new fs.File { path = "/etc/app-config.d/settings.conf"; state = new fs.Missing {} })
  }
  
  ["Service with dots"] {
    genDynamic(new systemd.Unit { name = "my-app.service"; state = new systemd.Missing {} })
  }
  
  ["File with content"] {
    genDynamic(new fs.File {
      path = "/tmp/test.txt"
      state = new fs.FilePresent {
        content = "Hello World"
        owner = "root"
        group = "root"
        permissions = "644"
      }
    })
  }
  
  ["Enabled service"] {
    genDynamic(new systemd.Unit { name = "test-enabled.service"; state = new systemd.Enabled { active = true; autoStart = true; daemonReload = true } })
  }
  
  ["Disabled service"] {
    genDynamic(new systemd.Unit { name = "test-disabled.service"; state = new systemd.Disabled { stopIfRunning = true; daemonReload = true } })
  }
  
  ["Masked service"] {
    genDynamic(new systemd.Unit { name = "test-masked.service"; state = new systemd.Masked { daemonReload = true } })
  }
  
  ["Test user present"] {
    genDynamic(new user.User { name = "testuser"; state = new user.UserPresent { home = "/home/testuser"; shell = "/bin/bash" } })
  }
  
  ["Test user absent"] {  
    genDynamic(new user.User { name = "olduser"; state = new user.Missing {} })
  }
}