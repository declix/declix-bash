name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install mise
      uses: jdx/mise-action@v2

    - name: Install dependencies
      run: |
        mise install
        echo "$HOME/.local/share/mise/shims" >> $GITHUB_PATH

    - name: Run all tests
      run: |
        just shellcheck
        cd tests
        just test-local-generate

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: startsWith(github.ref, 'refs/tags/')
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Extract metadata for container
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push container
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Containerfile
        push: ${{ startsWith(github.ref, 'refs/tags/') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install mise for release creation
      uses: jdx/mise-action@v2

    - name: Install dependencies for release creation
      run: |
        mise install
        echo "$HOME/.local/share/mise/shims" >> $GITHUB_PATH

    - name: Build single-file release
      run: just release

    - name: Create release archive
      run: |
        mkdir -p dist
        tar -czf dist/declix-bash-${{ steps.tag.outputs.tag }}.tar.gz \
          --exclude='.git' \
          --exclude='dist' \
          --exclude='tests/*/generated.sh' \
          .

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/declix-bash-${{ steps.tag.outputs.tag }}.tar.gz
          out/declix-bash.sh
        body: |
          ## declix-bash ${{ steps.tag.outputs.tag }}
          
          Bash script generator for declarative Linux system configuration using Pkl.
          
          ### Installation Options
          
          **Single-file release (Recommended):**
          ```bash
          # Download the script
          curl -L -o declix-bash.sh https://github.com/declix/declix-bash/releases/download/${{ steps.tag.outputs.tag }}/declix-bash.sh
          chmod +x declix-bash.sh
          
          # Generate and run scripts (requires pkl)
          ./declix-bash.sh resources.pkl | bash -s check
          ./declix-bash.sh resources.pkl | bash -s apply
          ```
          
          **Using container:**
          ```bash
          # No local installation required
          podman run --rm -v ./resources.pkl:/work/resources.pkl ghcr.io/declix/declix-bash:${{ steps.tag.outputs.tag }} /work/resources.pkl | bash -s check
          ```
          
          **From source:**
          ```bash
          # Extract the archive
          tar -xzf declix-bash-${{ steps.tag.outputs.tag }}.tar.gz
          cd declix-bash
          
          # Install dependencies
          just deps
          
          # Generate and run scripts
          ./generate.sh resources.pkl | bash -s check
          ```
        draft: false
        prerelease: false